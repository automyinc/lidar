
// AUTO GENERATED by vnxcppcodegen

#include <automy/lidar/LidarInfo.hxx>
#include <automy/lidar/Package.hxx>
#include <automy/lidar/PointCloud.hxx>
#include <automy/lidar/RawBlock.hxx>
#include <automy/lidar/point_t.hxx>
#include <automy/lidar/raw_point_t.hxx>

#include <automy/lidar/package.hxx>
#include <vnx/vnx.h>



namespace vnx {

const TypeCode* type<::automy::lidar::LidarInfo>::get_type_code() {
	return automy::lidar::vnx_native_type_code_LidarInfo;
}

void type<::automy::lidar::LidarInfo>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::lidar::LidarInfo());
}

void type<::automy::lidar::LidarInfo>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::lidar::LidarInfo& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::automy::lidar::Package>::get_type_code() {
	return automy::lidar::vnx_native_type_code_Package;
}

void type<::automy::lidar::Package>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::lidar::Package());
}

void type<::automy::lidar::Package>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::lidar::Package& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::automy::lidar::PointCloud>::get_type_code() {
	return automy::lidar::vnx_native_type_code_PointCloud;
}

void type<::automy::lidar::PointCloud>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::lidar::PointCloud());
}

void type<::automy::lidar::PointCloud>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::lidar::PointCloud& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::automy::lidar::RawBlock>::get_type_code() {
	return automy::lidar::vnx_native_type_code_RawBlock;
}

void type<::automy::lidar::RawBlock>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::lidar::RawBlock());
}

void type<::automy::lidar::RawBlock>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::lidar::RawBlock& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::automy::lidar::point_t>::get_type_code() {
	return automy::lidar::vnx_native_type_code_point_t;
}

void type<::automy::lidar::point_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::lidar::point_t());
}

void type<::automy::lidar::point_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::lidar::point_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::automy::lidar::raw_point_t>::get_type_code() {
	return automy::lidar::vnx_native_type_code_raw_point_t;
}

void type<::automy::lidar::raw_point_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::lidar::raw_point_t());
}

void type<::automy::lidar::raw_point_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::lidar::raw_point_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}


} // namespace vnx


namespace automy {
namespace lidar {


void register_all_types() {
	vnx::register_type_code(::automy::lidar::LidarInfo::static_create_type_code());
	vnx::register_type_code(::automy::lidar::Package::static_create_type_code());
	vnx::register_type_code(::automy::lidar::PointCloud::static_create_type_code());
	vnx::register_type_code(::automy::lidar::RawBlock::static_create_type_code());
	vnx::register_type_code(::automy::lidar::point_t::static_create_type_code());
	vnx::register_type_code(::automy::lidar::raw_point_t::static_create_type_code());
}

static struct vnx_static_init {
	vnx_static_init() {
		register_all_types();
	}
} vnx_static_init_;

const vnx::TypeCode* const vnx_native_type_code_LidarInfo = vnx::get_type_code(vnx::Hash64(0x73e57a5078b9a8c5ull));
const vnx::TypeCode* const vnx_native_type_code_Package = vnx::get_type_code(vnx::Hash64(0x4b3efc9be6ecaaf9ull));
const vnx::TypeCode* const vnx_native_type_code_PointCloud = vnx::get_type_code(vnx::Hash64(0x5c9111061d0579a3ull));
const vnx::TypeCode* const vnx_native_type_code_RawBlock = vnx::get_type_code(vnx::Hash64(0x78229d23be53c72dull));
const vnx::TypeCode* const vnx_native_type_code_point_t = vnx::get_type_code(vnx::Hash64(0x38fdcb2273263568ull));
const vnx::TypeCode* const vnx_native_type_code_raw_point_t = vnx::get_type_code(vnx::Hash64(0x6c9eb7a59f808b1cull));

} // namespace automy
} // namespace lidar
