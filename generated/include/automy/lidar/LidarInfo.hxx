
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_automy_lidar_LidarInfo_HXX_
#define INCLUDE_automy_lidar_LidarInfo_HXX_

#include <automy/lidar/package.hxx>
#include <automy/basic/Transform3D.hxx>
#include <automy/math/Vector3d.hpp>


namespace automy {
namespace lidar {

class AUTOMY_LIDAR_EXPORT LidarInfo : public ::automy::basic::Transform3D {
public:
	
	::automy::math::Vector3d position;
	::automy::math::Vector3d rotation;
	int32_t delay = 0;
	
	typedef ::automy::basic::Transform3D Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0x73e57a5078b9a8c5ull;
	
	LidarInfo() {}
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	virtual void update();
	
	static std::shared_ptr<LidarInfo> create();
	std::shared_ptr<vnx::Value> clone() const override;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) override;
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	template<typename T>
	void accept_generic(T& _visitor) const;
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const LidarInfo& _value);
	friend std::istream& operator>>(std::istream& _in, LidarInfo& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method) override;
	
};

template<typename T>
void LidarInfo::accept_generic(T& _visitor) const {
	_visitor.template type_begin<LidarInfo>(8);
	_visitor.type_field("time", 0); _visitor.accept(time);
	_visitor.type_field("time_offset", 1); _visitor.accept(time_offset);
	_visitor.type_field("frame", 2); _visitor.accept(frame);
	_visitor.type_field("parent", 3); _visitor.accept(parent);
	_visitor.type_field("matrix", 4); _visitor.accept(matrix);
	_visitor.type_field("position", 5); _visitor.accept(position);
	_visitor.type_field("rotation", 6); _visitor.accept(rotation);
	_visitor.type_field("delay", 7); _visitor.accept(delay);
	_visitor.template type_end<LidarInfo>(8);
}


} // namespace automy
} // namespace lidar


namespace vnx {

} // vnx

#endif // INCLUDE_automy_lidar_LidarInfo_HXX_
